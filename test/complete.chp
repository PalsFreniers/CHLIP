chip not(A: 1) -> Z: 1 {
        nand(A, A) -> Z;
}

chip and(A: 1, B: 1) -> Z: 1 {
        cross X: 1;
        nand(A, B) -> X;
        not(X) -> Z;
}

chip add(A: 1, B: 1, carry: 1) -> sum: 1, carry: 1 {
        cross XOR;

        xor(A, B) -> XOR;
        xor(carry, XOR) -> XOR;
}

board bytes {
        chip add(A: 8, B: 8) -> Z: 8 {
                # /add :: _add;
                cross carry: 1;
                _add(A[0], B[0], 0) -> Z[0], carry;
                _add(A[0], B[0], carry) -> Z[0], carry;
        }
}

chip addOne(num: 8) -> ret: 8 {
	# /bytes/add;
	add(num, 1) -> ret;
}

proc printAlpha {
        cross Base: 8;
        buf('A') -> Base;
loop:
        debug Base/char;
        addOne(Base) -> Base;
        cmp Base, 'Z';
        jeq end;
        jmp loop;
end:
        debug "End of the alphabet";
}

proc main {
        cross Z;
        debug and/*;
        debug "";
        debug "A | B | A&B";
        debug "--|---|----";
        and(0, 0) -> Z;
        debug "0 | 0 | " Z;
        and(1, 0) -> Z;
        debug "1 | 0 | " Z;
        and(0, 1) -> Z;
        debug "0 | 1 | " Z;
        and(1, 1) -> Z;
        debug "1 | 1 | " Z;
}
